/* Generated By:JJTree&JavaCC: Do not edit this line. SufParser.java */
package jp.dev7.enchant.doga.old.v4.parser.suf;
public class SufParser/*@bgen(jjtree)*/implements SufParserTreeConstants, SufParserConstants {/*@bgen(jjtree)*/
  protected JJTSufParserState jjtree = new JJTSufParserState();

  final public ASTStart Start() throws ParseException {
 /*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        Obj();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OBJ:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Obj() throws ParseException {
 /*@bgen(jjtree) Obj */
  ASTObj jjtn000 = new ASTObj(JJTOBJ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OBJ);
      jj_consume_token(SUF);
      jjtn000.nodeValue = ObjectName();
      jj_consume_token(BLOCK_START);
      ObjectBody();
      jj_consume_token(BLOCK_END);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public String ObjectName() throws ParseException {
        String name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OBJ:
    case SUF:
    case ATR:
    case PRIM:
    case POLY:
    case SHADE:
    case UVPOLY:
    case UVSHADE:
    case NAME:
      name = Name();
      break;
    case DQ:
      jj_consume_token(DQ);
      name = Name();
      jj_consume_token(DQ);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public void ObjectBody() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATR:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      AttrObj();
    }
  }

  final public void AttrObj() throws ParseException {
 /*@bgen(jjtree) AttrObj */
  ASTAttrObj jjtn000 = new ASTAttrObj(JJTATTROBJ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Attribute();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        Func();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PRIM:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        Primitive();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Attribute() throws ParseException {
 /*@bgen(jjtree) Attribute */
  ASTAttribute jjtn000 = new ASTAttribute(JJTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ATR);
      jjtn000.nodeValue = AttrName();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public String AttrName() throws ParseException {
        String name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OBJ:
    case SUF:
    case ATR:
    case PRIM:
    case POLY:
    case SHADE:
    case UVPOLY:
    case UVSHADE:
    case NAME:
      name = Name();
      break;
    case DQ:
      jj_consume_token(DQ);
      name = Name();
      jj_consume_token(DQ);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public void Func() throws ParseException {
    jj_consume_token(NAME);
    jj_consume_token(DATA_START);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        Func();
        break;
      case NUM:
        Num();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
      case NAME:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
    }
    jj_consume_token(DATA_END);
  }

  final public void Primitive() throws ParseException {
 /*@bgen(jjtree) Primitive */
  ASTPrimitive jjtn000 = new ASTPrimitive(JJTPRIMITIVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PRIM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POLY:
        jj_consume_token(POLY);
        jj_consume_token(DATA_START);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUM:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_5;
          }
          PolygonVertex();
        }
        jj_consume_token(DATA_END);
        break;
      case SHADE:
        jj_consume_token(SHADE);
        jj_consume_token(DATA_START);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUM:
            ;
            break;
          default:
            jj_la1[9] = jj_gen;
            break label_6;
          }
          ShadeVertex();
        }
        jj_consume_token(DATA_END);
        break;
      case UVPOLY:
        jj_consume_token(UVPOLY);
        jj_consume_token(DATA_START);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUM:
            ;
            break;
          default:
            jj_la1[10] = jj_gen;
            break label_7;
          }
          UvPolyVertex();
        }
        jj_consume_token(DATA_END);
        break;
      case UVSHADE:
        jj_consume_token(UVSHADE);
        jj_consume_token(DATA_START);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUM:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_8;
          }
          UvShadeVertex();
        }
        jj_consume_token(DATA_END);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PolygonVertex() throws ParseException {
 /*@bgen(jjtree) PolygonVertex */
  ASTPolygonVertex jjtn000 = new ASTPolygonVertex(JJTPOLYGONVERTEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      X();
      Y();
      Z();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ShadeVertex() throws ParseException {
 /*@bgen(jjtree) ShadeVertex */
  ASTShadeVertex jjtn000 = new ASTShadeVertex(JJTSHADEVERTEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      X();
      Y();
      Z();
      NormalX();
      NormalY();
      NormalZ();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void UvPolyVertex() throws ParseException {
 /*@bgen(jjtree) UvPolyVertex */
  ASTUvPolyVertex jjtn000 = new ASTUvPolyVertex(JJTUVPOLYVERTEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      X();
      Y();
      Z();
      U();
      V();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void UvShadeVertex() throws ParseException {
 /*@bgen(jjtree) UvShadeVertex */
  ASTUvShadeVertex jjtn000 = new ASTUvShadeVertex(JJTUVSHADEVERTEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      X();
      Y();
      Z();
      NormalX();
      NormalY();
      NormalZ();
      U();
      V();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public String Name() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      t = jj_consume_token(NAME);
      break;
    case OBJ:
      t = jj_consume_token(OBJ);
      break;
    case SUF:
      t = jj_consume_token(SUF);
      break;
    case ATR:
      t = jj_consume_token(ATR);
      break;
    case PRIM:
      t = jj_consume_token(PRIM);
      break;
    case POLY:
      t = jj_consume_token(POLY);
      break;
    case SHADE:
      t = jj_consume_token(SHADE);
      break;
    case UVPOLY:
      t = jj_consume_token(UVPOLY);
      break;
    case UVSHADE:
      t = jj_consume_token(UVSHADE);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public void X() throws ParseException {
          /*@bgen(jjtree) X */
  ASTX jjtn000 = new ASTX(JJTX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.nodeValue = Num();
    } catch (Throwable jjte000) {
               if (jjtc000) {
                 jjtree.clearNodeScope(jjtn000);
                 jjtc000 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte000 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte000;}
               }
               if (jjte000 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte000;}
               }
               {if (true) throw (Error)jjte000;}
    } finally {
               if (jjtc000) {
                 jjtree.closeNodeScope(jjtn000, true);
               }
    }
  }

  final public void Y() throws ParseException {
          /*@bgen(jjtree) Y */
  ASTY jjtn000 = new ASTY(JJTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.nodeValue = Num();
    } catch (Throwable jjte000) {
               if (jjtc000) {
                 jjtree.clearNodeScope(jjtn000);
                 jjtc000 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte000 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte000;}
               }
               if (jjte000 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte000;}
               }
               {if (true) throw (Error)jjte000;}
    } finally {
               if (jjtc000) {
                 jjtree.closeNodeScope(jjtn000, true);
               }
    }
  }

  final public void Z() throws ParseException {
          /*@bgen(jjtree) Z */
  ASTZ jjtn000 = new ASTZ(JJTZ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.nodeValue = Num();
    } catch (Throwable jjte000) {
               if (jjtc000) {
                 jjtree.clearNodeScope(jjtn000);
                 jjtc000 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte000 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte000;}
               }
               if (jjte000 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte000;}
               }
               {if (true) throw (Error)jjte000;}
    } finally {
               if (jjtc000) {
                 jjtree.closeNodeScope(jjtn000, true);
               }
    }
  }

  final public void NormalX() throws ParseException {
                /*@bgen(jjtree) NormalX */
  ASTNormalX jjtn000 = new ASTNormalX(JJTNORMALX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.nodeValue = Num();
    } catch (Throwable jjte000) {
                     if (jjtc000) {
                       jjtree.clearNodeScope(jjtn000);
                       jjtc000 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte000 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte000;}
                     }
                     if (jjte000 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte000;}
                     }
                     {if (true) throw (Error)jjte000;}
    } finally {
                     if (jjtc000) {
                       jjtree.closeNodeScope(jjtn000, true);
                     }
    }
  }

  final public void NormalY() throws ParseException {
                /*@bgen(jjtree) NormalY */
  ASTNormalY jjtn000 = new ASTNormalY(JJTNORMALY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.nodeValue = Num();
    } catch (Throwable jjte000) {
                     if (jjtc000) {
                       jjtree.clearNodeScope(jjtn000);
                       jjtc000 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte000 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte000;}
                     }
                     if (jjte000 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte000;}
                     }
                     {if (true) throw (Error)jjte000;}
    } finally {
                     if (jjtc000) {
                       jjtree.closeNodeScope(jjtn000, true);
                     }
    }
  }

  final public void NormalZ() throws ParseException {
                /*@bgen(jjtree) NormalZ */
  ASTNormalZ jjtn000 = new ASTNormalZ(JJTNORMALZ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.nodeValue = Num();
    } catch (Throwable jjte000) {
                     if (jjtc000) {
                       jjtree.clearNodeScope(jjtn000);
                       jjtc000 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte000 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte000;}
                     }
                     if (jjte000 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte000;}
                     }
                     {if (true) throw (Error)jjte000;}
    } finally {
                     if (jjtc000) {
                       jjtree.closeNodeScope(jjtn000, true);
                     }
    }
  }

  final public void U() throws ParseException {
          /*@bgen(jjtree) U */
  ASTU jjtn000 = new ASTU(JJTU);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.nodeValue = Num();
    } catch (Throwable jjte000) {
               if (jjtc000) {
                 jjtree.clearNodeScope(jjtn000);
                 jjtc000 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte000 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte000;}
               }
               if (jjte000 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte000;}
               }
               {if (true) throw (Error)jjte000;}
    } finally {
               if (jjtc000) {
                 jjtree.closeNodeScope(jjtn000, true);
               }
    }
  }

  final public void V() throws ParseException {
          /*@bgen(jjtree) V */
  ASTV jjtn000 = new ASTV(JJTV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.nodeValue = Num();
    } catch (Throwable jjte000) {
               if (jjtc000) {
                 jjtree.clearNodeScope(jjtn000);
                 jjtc000 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte000 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte000;}
               }
               if (jjte000 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte000;}
               }
               {if (true) throw (Error)jjte000;}
    } finally {
               if (jjtc000) {
                 jjtree.closeNodeScope(jjtn000, true);
               }
    }
  }

  final public String Num() throws ParseException {
  Token t;
    t = jj_consume_token(NUM);
                {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public SufParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x42ff00,0x400,0x20000,0x800,0x42ff00,0x30000,0x30000,0x10000,0x10000,0x10000,0x10000,0xf000,0x2ff00,};
   }

  /** Constructor with InputStream. */
  public SufParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SufParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SufParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SufParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SufParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SufParser(SufParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SufParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[23];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 23; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
