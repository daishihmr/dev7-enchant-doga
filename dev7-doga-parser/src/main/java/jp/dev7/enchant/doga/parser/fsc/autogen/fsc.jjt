options {
	STATIC = false;
	MULTI = true;
	VISITOR = true;
    NODE_EXTENDS = "jp.dev7.enchant.doga.parser.BaseNode";
}

PARSER_BEGIN(FscParser)
package jp.dev7.enchant.doga.parser.fsc.autogen;
public class FscParser {
}
PARSER_END(FscParser)

SKIP:
{
	" " | "\r" | "\t" | "\n"
}

MORE: { "/*": COMMENT_TEXT }
<COMMENT_TEXT> SPECIAL_TOKEN: { <COMMENT: "*/">: DEFAULT }
<COMMENT_TEXT> MORE: { < ~[] > }

TOKEN:
{
		<FRAM: "fram">
	|	<OBJ: "obj">
	|	<EYE: "eye">
	|	<TARGET: "target">
	|	<LIGHT: "light">
    |   <NUM: ("-")?(["0"-"9"])+("."(["0"-"9"])+)?(("E-")(["0"-"9"])+)?>
    |   <NAME: [         "a"-"z", "A"-"Z", "_", "#", ".", ":", "\\", "[", "]", "-", "\u3040"-"\u309f", "\u30a0"-"\u30ff", "\u4e00"-"\u9fff", "\uff10"-"\uff19", "\uff21"-"\uff3a", "\uff41"-"\uff5a", "\uff1f", "\uff01", "\uff08", "\uff09"]
              (["0"-"9", "a"-"z", "A"-"Z", "_", "#", ".", ":", "\\", "[", "]", "-", "\u3040"-"\u309f", "\u30a0"-"\u30ff", "\u4e00"-"\u9fff", "\uff10"-"\uff19", "\uff21"-"\uff3a", "\uff41"-"\uff5a", "\uff1f", "\uff01", "\uff08", "\uff09"])*>
    |   <NUMNAME: ["0"-"9"]
              (["0"-"9", "a"-"z", "A"-"Z", "_", "#", ".", ":", "\\", "[", "]", "-", "\u3040"-"\u309f", "\u30a0"-"\u30ff", "\u4e00"-"\u9fff", "\uff10"-"\uff19", "\uff21"-"\uff3a", "\uff41"-"\uff5a", "\uff1f", "\uff01", "\uff08", "\uff09"])*>
	|	<BLOCK_START: "{">
	|	<BLOCK_END: "}">
	|	<DATA_START: "(">
	|	<DATA_END: ")">
	|   <DQ: "\"">
}

ASTStart Start():
{}
{
	Fram() { return jjtThis; }
}

void Fram():
{}
{
	<FRAM>
	<BLOCK_START>
		Light()
		(ObjData())*
	<BLOCK_END>
}

void Light() #void:
{}
{
	<LIGHT> Func()
}

void ObjData():
{
	String obj;
}
{
	<BLOCK_START>
	(Func())*
	obj = Obj()
	<BLOCK_END>
	{
		jjtThis.nodeValue = obj;
	}
}

String Obj() #void:
{
	Token t;
}
{
	<OBJ> t = ObjName() { return t.image; }
	|	Eye() { return null; }
	|	<TARGET> { return null; }
}

Token ObjName() #void:
{
    Token t;
}
{
    (
        t = <OBJ>
    |   <DQ>( t = <NUMNAME> )<DQ>
    |   t = <NAME>
    )
    {
        return t;
    }
}

void Eye() #void:
{}
{
	<EYE> Func()
}

void Func():
{}
{
	FuncName() <DATA_START> (Num()|Func())+ <DATA_END>
}

void FuncName():
{
	Token t;
}
{
	t = <NAME>
	{
		jjtThis.nodeValue = t.image;
	}
}


void Num():
{
	Token t;
}
{
	t = <NUM>
	{
		jjtThis.nodeValue = t.image;
	}
}
