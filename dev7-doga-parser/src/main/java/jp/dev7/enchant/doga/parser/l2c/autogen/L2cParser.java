/* Generated By:JJTree&JavaCC: Do not edit this line. L2cParser.java */
package jp.dev7.enchant.doga.parser.l2c.autogen;
public class L2cParser/*@bgen(jjtree)*/implements L2cParserTreeConstants, L2cParserConstants {/*@bgen(jjtree)*/
  protected JJTL2cParserState jjtree = new JJTL2cParserState();

  final public ASTStart Start() throws ParseException {
 /*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      L2c();
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void L2c() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNC_START:
      OuterStart();
      break;
    case FRAM:
      jj_consume_token(FRAM);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(BLOCK_START);
    Env();
    Unit();
    jj_consume_token(BLOCK_END);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNC_END:
      OuterEnd();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  final public void OuterStart() throws ParseException {
    jj_consume_token(FUNC_START);
    Name();
    jj_consume_token(DATA_START);
    jj_consume_token(POSE);
    jj_consume_token(INDEX_START);
    jj_consume_token(INDEX_END);
    jj_consume_token(COM);
    jj_consume_token(P);
    jj_consume_token(DATA_END);
  }

  final public void OuterEnd() throws ParseException {
    jj_consume_token(FUNC_END);
    jj_consume_token(DATA_START);
    jj_consume_token(DATA_END);
  }

  final public void Env() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARAM_START:
      jj_consume_token(PARAM_START);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    Light();
    Eye();
    Target();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARAM_END:
      jj_consume_token(PARAM_END);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  final public void Light() throws ParseException {
    jj_consume_token(LIGHT);
    Func();
  }

  final public void Eye() throws ParseException {
    jj_consume_token(BLOCK_START);
    UnitMov();
    jj_consume_token(EYE);
    Func();
    jj_consume_token(BLOCK_END);
  }

  final public void Target() throws ParseException {
    jj_consume_token(BLOCK_START);
    UnitMov();
    jj_consume_token(TARGET);
    jj_consume_token(BLOCK_END);
  }

  final public void Unit() throws ParseException {
 /*@bgen(jjtree) Unit */
  ASTUnit jjtn000 = new ASTUnit(JJTUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BLOCK_START);
      Mov();
      Rotz();
      Roty();
      Rotx();
      Obj();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BLOCK_START:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_1;
        }
        Unit();
      }
      jj_consume_token(BLOCK_END);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Mov() throws ParseException {
 /*@bgen(jjtree) Mov */
  ASTMov jjtn000 = new ASTMov(JJTMOV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MOV);
      jj_consume_token(DATA_START);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARAM_START:
        jj_consume_token(PARAM_START);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      Num();
      Num();
      Num();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARAM_END:
        jj_consume_token(PARAM_END);
        jj_consume_token(YEN);
        jj_consume_token(DATA_START);
        jj_consume_token(POSE);
        jj_consume_token(INDEX_START);
        jj_consume_token(DATA_START);
        jj_consume_token(P);
        jj_consume_token(PLUS);
        Num();
        jj_consume_token(DATA_END);
        jj_consume_token(INDEX_END);
        jj_consume_token(DATA_END);
        jj_consume_token(COM);
        jj_consume_token(DATA_START);
        jj_consume_token(POSE);
        jj_consume_token(INDEX_START);
        jj_consume_token(DATA_START);
        jj_consume_token(P);
        jj_consume_token(PLUS);
        Num();
        jj_consume_token(DATA_END);
        jj_consume_token(INDEX_END);
        jj_consume_token(DATA_END);
        jj_consume_token(COM);
        jj_consume_token(DATA_START);
        jj_consume_token(POSE);
        jj_consume_token(INDEX_START);
        jj_consume_token(DATA_START);
        jj_consume_token(P);
        jj_consume_token(PLUS);
        Num();
        jj_consume_token(DATA_END);
        jj_consume_token(INDEX_END);
        jj_consume_token(DATA_END);
        jj_consume_token(YEN);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(DATA_END);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Rotz() throws ParseException {
 /*@bgen(jjtree) Rotz */
  ASTRotz jjtn000 = new ASTRotz(JJTROTZ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ROTZ);
      jj_consume_token(DATA_START);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARAM_START:
        jj_consume_token(PARAM_START);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      Num();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARAM_END:
        jj_consume_token(PARAM_END);
        jj_consume_token(YEN);
        jj_consume_token(POSE);
        jj_consume_token(INDEX_START);
        jj_consume_token(DATA_START);
        jj_consume_token(P);
        jj_consume_token(PLUS);
        Num();
        jj_consume_token(DATA_END);
        jj_consume_token(INDEX_END);
        jj_consume_token(YEN);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(DATA_END);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Roty() throws ParseException {
 /*@bgen(jjtree) Roty */
  ASTRoty jjtn000 = new ASTRoty(JJTROTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ROTY);
      jj_consume_token(DATA_START);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARAM_START:
        jj_consume_token(PARAM_START);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      Num();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARAM_END:
        jj_consume_token(PARAM_END);
        jj_consume_token(YEN);
        jj_consume_token(POSE);
        jj_consume_token(INDEX_START);
        jj_consume_token(DATA_START);
        jj_consume_token(P);
        jj_consume_token(PLUS);
        Num();
        jj_consume_token(DATA_END);
        jj_consume_token(INDEX_END);
        jj_consume_token(YEN);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(DATA_END);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Rotx() throws ParseException {
 /*@bgen(jjtree) Rotx */
  ASTRotx jjtn000 = new ASTRotx(JJTROTX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ROTX);
      jj_consume_token(DATA_START);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARAM_START:
        jj_consume_token(PARAM_START);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      Num();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARAM_END:
        jj_consume_token(PARAM_END);
        jj_consume_token(YEN);
        jj_consume_token(POSE);
        jj_consume_token(INDEX_START);
        jj_consume_token(DATA_START);
        jj_consume_token(P);
        jj_consume_token(PLUS);
        Num();
        jj_consume_token(DATA_END);
        jj_consume_token(INDEX_END);
        jj_consume_token(YEN);
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      jj_consume_token(DATA_END);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Obj() throws ParseException {
 /*@bgen(jjtree) Obj */
  ASTObj jjtn000 = new ASTObj(JJTOBJ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BLOCK_START);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SCAL:
        Scal();
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOV:
        UnitMov();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBJ:
        jjtn000.nodeValue = NormalObj();
        break;
      case PARAM_START:
        jjtn000.nodeValue = SelectiveObj();
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(BLOCK_END);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public String NormalObj() throws ParseException {
    String result;
    jj_consume_token(OBJ);
    result = Name();
    jj_consume_token(PARAM_START);
    FileName();
    jj_consume_token(PARAM_END);
            {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String SelectiveObj() throws ParseException {
    String result;
    jj_consume_token(PARAM_START);
    jj_consume_token(SELECTIVE);
    jj_consume_token(PARAM_END);
    SelectiveIf();
    jj_consume_token(OBJ);
    result = Name();
    jj_consume_token(PARAM_START);
    FileName();
    jj_consume_token(PARAM_END);
    SelectiveEndIf();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECTIVEIF:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_2;
      }
      SelectiveIf();
      jj_consume_token(OBJ);
      Name();
      jj_consume_token(PARAM_START);
      FileName();
      jj_consume_token(PARAM_END);
      SelectiveEndIf();
    }
    jj_consume_token(PARAM_START);
    jj_consume_token(SELECTIVE);
    jj_consume_token(DONE);
    jj_consume_token(PARAM_END);
            {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public void SelectiveIf() throws ParseException {
    jj_consume_token(SELECTIVEIF);
    jj_consume_token(DATA_START);
    jj_consume_token(POSE);
    jj_consume_token(INDEX_START);
    jj_consume_token(DATA_START);
    jj_consume_token(P);
    jj_consume_token(PLUS);
    Num();
    jj_consume_token(DATA_END);
    jj_consume_token(INDEX_END);
    jj_consume_token(EQUAL);
    Num();
    jj_consume_token(DATA_END);
  }

  final public void SelectiveEndIf() throws ParseException {
    jj_consume_token(SELECTIVEENDIF);
  }

  final public void Scal() throws ParseException {
 /*@bgen(jjtree) Scal */
  ASTScal jjtn000 = new ASTScal(JJTSCAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SCAL);
      jj_consume_token(DATA_START);
      Num();
      Num();
      Num();
      jj_consume_token(DATA_END);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void UnitMov() throws ParseException {
 /*@bgen(jjtree) UnitMov */
  ASTUnitMov jjtn000 = new ASTUnitMov(JJTUNITMOV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MOV);
      jj_consume_token(DATA_START);
      Num();
      Num();
      Num();
      jj_consume_token(DATA_END);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Func() throws ParseException {
 /*@bgen(jjtree) Func */
  ASTFunc jjtn000 = new ASTFunc(JJTFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FUNCNAME);
      jj_consume_token(DATA_START);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCNAME:
        case DQ:
        case NUM:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          Num();
          break;
        case DQ:
          Text();
          break;
        case FUNCNAME:
          Func();
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(DATA_END);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public String Num() throws ParseException {
 /*@bgen(jjtree) Num */
    ASTNum jjtn000 = new ASTNum(JJTNUM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUM);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            jjtn000.nodeValue = t.image;
            {if (true) return jjtn000.nodeValue;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Text() throws ParseException {
 /*@bgen(jjtree) Text */
    ASTText jjtn000 = new ASTText(JJTTEXT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(DQ);
      t = jj_consume_token(NAME);
      jj_consume_token(DQ);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            jjtn000.nodeValue = t.image;
            {if (true) return jjtn000.nodeValue;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Name() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DQ:
      jj_consume_token(DQ);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      t = jj_consume_token(NAME);
      break;
    case NUMNAME:
      t = jj_consume_token(NUMNAME);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DQ:
      jj_consume_token(DQ);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
        {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String FileName() throws ParseException {
 /*@bgen(jjtree) FileName */
    ASTFileName jjtn000 = new ASTFileName(JJTFILENAME);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    String s = "";
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DQ:
        jj_consume_token(DQ);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        t = jj_consume_token(NAME);
                                 s += t.image;
        break;
      case NUMNAME:
        t = jj_consume_token(NUMNAME);
                                    s += t.image;
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case YEN:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_4;
        }
        Yens();
                     s += "\u005c\u005c";
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME:
          t = jj_consume_token(NAME);
                                 s += t.image;
          break;
        case NUMNAME:
          t = jj_consume_token(NUMNAME);
                                    s += t.image;
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DQ:
        jj_consume_token(DQ);
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.nodeValue = s;
        {if (true) return s;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Yens() throws ParseException {
    label_5:
    while (true) {
      jj_consume_token(YEN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case YEN:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_5;
      }
    }
  }

  /** Generated Token Manager. */
  public L2cParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x0,0x10000000,0x20000000,0x4000000,0x10000000,0x20000000,0x10000000,0x20000000,0x10000000,0x20000000,0x10000000,0x20000000,0x8000,0x200,0x10010000,0x400000,0x1000000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x40,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x104,0x104,0x4,0x600,0x4,0x4,0x600,0x8,0x600,0x4,0x8,};
   }

  /** Constructor with InputStream. */
  public L2cParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public L2cParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new L2cParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public L2cParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new L2cParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public L2cParser(L2cParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(L2cParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 28; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
