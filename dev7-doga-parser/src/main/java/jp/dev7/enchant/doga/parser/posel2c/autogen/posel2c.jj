/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. posel2c.jj */
/*@egen*/options {
    STATIC = false;
                 
                   
                                                          
}

PARSER_BEGIN(PoseL2cParser)
package jp.dev7.enchant.doga.parser.posel2c.autogen;
@SuppressWarnings("unused") public class PoseL2cParser/*@bgen(jjtree)*/implements PoseL2cParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTPoseL2cParserState jjtree = new JJTPoseL2cParserState();

/*@egen*/
}
PARSER_END(PoseL2cParser)

SKIP:
{
    " " | "\r" | "\t" | "\n"
}

MORE: { "/*": COMMENT_TEXT }
<COMMENT_TEXT> SPECIAL_TOKEN: { <COMMENT: "*/">: DEFAULT }
<COMMENT_TEXT> MORE: { < ~[] > }

TOKEN:
{
        <CM: ":">
    |   <DQ: "\"">
    |   <DATA_START: "(">
    |   <DATA_END: ")">
    |   <NUM: ("-")?(["0"-"9"])+("."(["0"-"9"])+)?(("E-")(["0"-"9"])+)?>
    |   <NAME: [         "a"-"z", "A"-"Z", "_", "#", ".", ":", "-", "\u3040"-"\u309f", "\u30a0"-"\u30ff", "\u4e00"-"\u9fff", "\uff10"-"\uff19", "\uff21"-"\uff3a", "\uff41"-"\uff5a", "\uff1f", "\uff01", "\uff08", "\uff09"]
              (["0"-"9", "a"-"z", "A"-"Z", "_", "#", ".", ":", "-", "\u3040"-"\u309f", "\u30a0"-"\u30ff", "\u4e00"-"\u9fff", "\uff10"-"\uff19", "\uff21"-"\uff3a", "\uff41"-"\uff5a", "\uff1f", "\uff01", "\uff08", "\uff09"])*>
}

ASTStart Start():
{/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
    try {
/*@egen*/
    Pose()/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Pose():
{/*@bgen(jjtree) Pose */
  ASTPose jjtn000 = new ASTPose(JJTPOSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Pose */
    try {
/*@egen*/
    <NUM><CM>
    Name()
    <DATA_START>
    <NUM> <NUM>
    UnitMov()
    (UnitRot())*
    <DATA_END>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void UnitMov():
{/*@bgen(jjtree) UnitMov */
  ASTUnitMov jjtn000 = new ASTUnitMov(JJTUNITMOV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UnitMov */
    try {
/*@egen*/
    <DATA_START>
    Num() Num() Num()
    <DATA_END>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void UnitRot():
{/*@bgen(jjtree) UnitRot */
  ASTUnitRot jjtn000 = new ASTUnitRot(JJTUNITROT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UnitRot */
    try {
/*@egen*/
    <DATA_START>
    Num() Num() Num()
    <DATA_END>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Name():
{/*@bgen(jjtree) Name */
    ASTName jjtn000 = new ASTName(JJTNAME);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Name */
    try {
/*@egen*/
    (<DQ>)? t = <NAME> (<DQ>)?/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    {
        jjtn000.nodeValue = t.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Num():
{/*@bgen(jjtree) Num */
    ASTNum jjtn000 = new ASTNum(JJTNUM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Num */
    try {
/*@egen*/
    t = <NUM>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.nodeValue = t.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
