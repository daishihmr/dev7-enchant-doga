/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. l3c.jj */
/*@egen*/options {
    STATIC = false;
                 
                   
                                                          
}

PARSER_BEGIN(L3cParser)
package jp.dev7.enchant.doga.parser.l3c;
public class L3cParser/*@bgen(jjtree)*/implements L3cParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTL3cParserState jjtree = new JJTL3cParserState();

/*@egen*/
}
PARSER_END(L3cParser)

SKIP:
{
    " " | "\r" | "\t" | "\n"
}

MORE: { "/*": COMMENT_TEXT }
<COMMENT_TEXT> SPECIAL_TOKEN: { <COMMENT: "*/">: DEFAULT }
<COMMENT_TEXT> MORE: { < ~[] > }

TOKEN:
{
        <FRAM: "fram">
    |   <MOV: "mov">
    |   <ROTZ: "rotz">
    |   <ROTY: "roty">
    |   <ROTX: "rotx">
    |   <POSE: "pose">
    |   <P: "p">
    |   <SCAL: "scal">
    |   <OBJ: "obj">
    |   <LIGHT: "light">
    |   <EYE: "eye">
    |   <TARGET: "target">
    |   <SELECTIVE: "Selective">
    |   <DONE: "Done">
    |   <SELECTIVEIF: "#if">
    |   <SELECTIVEENDIF: "#endif">
    |   <FUNCNAME: ( "deg" | "rgb" | "pal" )>
    |   <PLUS: "+">
    |   <BLOCK_START: "{">
    |   <BLOCK_END: "}">
    |   <PARAM_START: "(:">
    |   <PARAM_END: ":)">
    |   <DATA_START: "(">
    |   <DATA_END: ")">
    |   <INDEX_START: "[">
    |   <INDEX_END: "]">
    |   <DQ: "\"">
    |   <YEN: "\\">
    |   <COM: ",">
    |   <EQUAL: "==">
    |   <FUNC_START: "#func">
    |   <CONNECTION_FUNCNAME: "CONNECTION_FUNCNAME">
    |   <FUNC_END: "#endfunc">
    |   <NUM: ("-")?(["0"-"9"])+("."(["0"-"9"])+)?(("E-")(["0"-"9"])+)?>
    |   <NAME: [         "a"-"z", "A"-"Z", "_", "#", ".", ":", "-", "\u3040"-"\u309f", "\u30a0"-"\u30ff", "\u4e00"-"\u9fff", "\uff10"-"\uff19", "\uff21"-"\uff3a", "\uff41"-"\uff5a", "\uff1f", "\uff01", "\uff08", "\uff09"]
              (["0"-"9", "a"-"z", "A"-"Z", "_", "#", ".", ":", "-", "\u3040"-"\u309f", "\u30a0"-"\u30ff", "\u4e00"-"\u9fff", "\uff10"-"\uff19", "\uff21"-"\uff3a", "\uff41"-"\uff5a", "\uff1f", "\uff01", "\uff08", "\uff09"])*>
    |   <NUMNAME: ["0"-"9"]
              (["0"-"9", "a"-"z", "A"-"Z", "_", "#", ".", ":", "-", "\u3040"-"\u309f", "\u30a0"-"\u30ff", "\u4e00"-"\u9fff", "\uff10"-"\uff19", "\uff21"-"\uff3a", "\uff41"-"\uff5a", "\uff1f", "\uff01", "\uff08", "\uff09"])*>
}

ASTStart Start():
{/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
    try {
/*@egen*/
    L3c()/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void L3c()      :
{}
{
    (OuterStart() | <FRAM>)
    <BLOCK_START>
        Env()
        Unit()
    <BLOCK_END>
    (OuterEnd())?
}

void OuterStart()      :{}{ <FUNC_START> <CONNECTION_FUNCNAME> <DATA_START><POSE><INDEX_START><INDEX_END><COM> <P><DATA_END> }
void OuterEnd()      :{}{ <FUNC_END> <DATA_START> <DATA_END> }

void Env()      :{}{ (<PARAM_START>)? Light() Eye() Target() (<PARAM_END>)? }
void Light()      :{}{ <LIGHT> Func() }
void Eye()      :{}{ <BLOCK_START> UnitMov() <EYE> Func() <BLOCK_END> }
void Target()      :{}{ <BLOCK_START> UnitMov() <TARGET> <BLOCK_END> }

void Unit():
{/*@bgen(jjtree) Unit */
  ASTUnit jjtn000 = new ASTUnit(JJTUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Unit */
        try {
/*@egen*/
	<BLOCK_START>
	Mov() Rotz() Roty() Rotx() Obj() (Unit())*
	<BLOCK_END>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Mov():
{/*@bgen(jjtree) Mov */
  ASTMov jjtn000 = new ASTMov(JJTMOV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Mov */
        try {
/*@egen*/
	<MOV>
	<DATA_START>
		(<PARAM_START>)?
			Num() Num() Num()
		(<PARAM_END>
		<YEN>
			<DATA_START> Num() <PLUS><POSE><INDEX_START><DATA_START><P><PLUS> Num() <DATA_END> <INDEX_END><DATA_END><COM>
			Num() <PLUS><DATA_START><POSE><INDEX_START><DATA_START><P><PLUS> Num() <DATA_END><INDEX_END><DATA_END><COM>
			Num() <PLUS><DATA_START><POSE><INDEX_START><DATA_START><P><PLUS> Num() <DATA_END><INDEX_END><DATA_END>
		<YEN>)?
	<DATA_END>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Rotz():
{/*@bgen(jjtree) Rotz */
  ASTRotz jjtn000 = new ASTRotz(JJTROTZ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Rotz */
        try {
/*@egen*/
	<ROTZ>
	<DATA_START>
		(<PARAM_START>)?
			Num()
		(<PARAM_END>
		<YEN>
			<POSE><INDEX_START><DATA_START><P><PLUS> Num() <DATA_END><INDEX_END>
		<YEN>)?
	<DATA_END>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Roty():
{/*@bgen(jjtree) Roty */
  ASTRoty jjtn000 = new ASTRoty(JJTROTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Roty */
        try {
/*@egen*/
	<ROTY>
	<DATA_START>
		(<PARAM_START>)?
			Num()
		(<PARAM_END>
		<YEN>
			<POSE><INDEX_START><DATA_START><P><PLUS> Num() <DATA_END><INDEX_END>
		<YEN>)?
	<DATA_END>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Rotx():
{/*@bgen(jjtree) Rotx */
  ASTRotx jjtn000 = new ASTRotx(JJTROTX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Rotx */
        try {
/*@egen*/
	<ROTX>
	<DATA_START>
		(<PARAM_START>)?
			Num()
		(<PARAM_END>
		<YEN>
			<POSE><INDEX_START><DATA_START><P><PLUS> Num() <DATA_END><INDEX_END>
		<YEN>)?
	<DATA_END>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Obj():
{/*@bgen(jjtree) Obj */
  ASTObj jjtn000 = new ASTObj(JJTOBJ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Obj */
        try {
/*@egen*/
	<BLOCK_START>
		(Scal())?
		(UnitMov())?
		(jjtn000.nodeValue = NormalObj() | jjtn000.nodeValue = SelectiveObj())
	<BLOCK_END>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String NormalObj()      :
{
    String result;
}
{
	<OBJ> result = Name()
	<PARAM_START>
		FileName()
	<PARAM_END>
	{
	    return result;
	}
}

String SelectiveObj()      :
{
    String result;
}
{
    <PARAM_START> <SELECTIVE> <PARAM_END>
        SelectiveIf()
            <OBJ> result = Name() <PARAM_START> FileName() <PARAM_END>
        SelectiveEndIf()
        (
            SelectiveIf()
                <OBJ> Name() <PARAM_START> FileName() <PARAM_END>
            SelectiveEndIf()
        )*
    <PARAM_START> <SELECTIVE> <DONE> <PARAM_END>
	{
	    return result;
	}
}

void SelectiveIf()      :
{}
{
    <SELECTIVEIF> <DATA_START> 
        <POSE><INDEX_START><DATA_START><P><PLUS>Num()<DATA_END><INDEX_END> <EQUAL> Num()
    <DATA_END>
}

void SelectiveEndIf()      :
{}
{
    <SELECTIVEENDIF>
}

void Scal():
{/*@bgen(jjtree) Scal */
  ASTScal jjtn000 = new ASTScal(JJTSCAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Scal */
        try {
/*@egen*/
	<SCAL> <DATA_START> Num() Num() Num() <DATA_END>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void UnitMov():
{/*@bgen(jjtree) UnitMov */
  ASTUnitMov jjtn000 = new ASTUnitMov(JJTUNITMOV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UnitMov */
        try {
/*@egen*/
	<MOV> <DATA_START> Num() Num() Num() <DATA_END>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Func():
{/*@bgen(jjtree) Func */
  ASTFunc jjtn000 = new ASTFunc(JJTFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Func */
        try {
/*@egen*/
	<FUNCNAME> <DATA_START> (Num() | Text() | Func())* <DATA_END>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String Num():
{/*@bgen(jjtree) Num */
    ASTNum jjtn000 = new ASTNum(JJTNUM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Num */
        try {
/*@egen*/
	t = <NUM>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	    jjtn000.nodeValue = t.image;
	    return jjtn000.nodeValue;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String Text():
{/*@bgen(jjtree) Text */
    ASTText jjtn000 = new ASTText(JJTTEXT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Text */
        try {
/*@egen*/
	<DQ> t = <NAME><DQ>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	    jjtn000.nodeValue = t.image;
	    return jjtn000.nodeValue;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String Name()      :
{
    Token t;
}
{
    (<DQ>)?
    (
        t = <NAME>
    |   t = <NUMNAME>
    )
    (<DQ>)?
    {
        return t.image;
    }
}

String FileName():
{/*@bgen(jjtree) FileName */
    ASTFileName jjtn000 = new ASTFileName(JJTFILENAME);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
    String s = "";
}
{/*@bgen(jjtree) FileName */
        try {
/*@egen*/
	(<DQ>)?
	    (
	            t = <NAME> { s += t.image; }
	        |   t = <NUMNAME> { s += t.image; }
	    )
	    (
            t = <YEN> { s += t.image; }
            (
                    t = <NAME> { s += t.image; }
                |   t = <NUMNAME> { s += t.image; }
            )
        )*
    (<DQ>)?/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.nodeValue = s;
        return s;
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
