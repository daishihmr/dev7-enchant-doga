/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. fsc.jj */
/*@egen*/options {
	STATIC = false;
	             
	               
                                                          
}

PARSER_BEGIN(FscParser)
package jp.dev7.enchant.doga.parser.fsc.autogen;
public class FscParser/*@bgen(jjtree)*/implements FscParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTFscParserState jjtree = new JJTFscParserState();

/*@egen*/
}
PARSER_END(FscParser)

SKIP:
{
	" " | "\r" | "\t" | "\n"
}

MORE: { "/*": COMMENT_TEXT }
<COMMENT_TEXT> SPECIAL_TOKEN: { <COMMENT: "*/">: DEFAULT }
<COMMENT_TEXT> MORE: { < ~[] > }

TOKEN:
{
		<FRAM: "fram">
	|	<OBJ: "obj">
	|	<EYE: "eye">
	|	<TARGET: "target">
	|	<LIGHT: "light">
    |   <NUM: ("-")?(["0"-"9"])+("."(["0"-"9"])+)?(("E-")(["0"-"9"])+)?>
    |   <NAME: [         "a"-"z", "A"-"Z", "_", "#", ".", ":", "\\", "[", "]", "-", "\u3040"-"\u309f", "\u30a0"-"\u30ff", "\u4e00"-"\u9fff", "\uff10"-"\uff19", "\uff21"-"\uff3a", "\uff41"-"\uff5a", "\uff1f", "\uff01", "\uff08", "\uff09"]
              (["0"-"9", "a"-"z", "A"-"Z", "_", "#", ".", ":", "\\", "[", "]", "-", "\u3040"-"\u309f", "\u30a0"-"\u30ff", "\u4e00"-"\u9fff", "\uff10"-"\uff19", "\uff21"-"\uff3a", "\uff41"-"\uff5a", "\uff1f", "\uff01", "\uff08", "\uff09"])*>
    |   <NUMNAME: ["0"-"9"]
              (["0"-"9", "a"-"z", "A"-"Z", "_", "#", ".", ":", "\\", "[", "]", "-", "\u3040"-"\u309f", "\u30a0"-"\u30ff", "\u4e00"-"\u9fff", "\uff10"-"\uff19", "\uff21"-"\uff3a", "\uff41"-"\uff5a", "\uff1f", "\uff01", "\uff08", "\uff09"])*>
	|	<BLOCK_START: "{">
	|	<BLOCK_END: "}">
	|	<DATA_START: "(">
	|	<DATA_END: ")">
	|   <DQ: "\"">
}

ASTStart Start():
{/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
        try {
/*@egen*/
	Fram()/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Fram():
{/*@bgen(jjtree) Fram */
  ASTFram jjtn000 = new ASTFram(JJTFRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Fram */
        try {
/*@egen*/
	<FRAM>
	<BLOCK_START>
		Light()
		(ObjData())*
	<BLOCK_END>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Light()      :
{}
{
	<LIGHT> Func()
}

void ObjData():
{/*@bgen(jjtree) ObjData */
        ASTObjData jjtn000 = new ASTObjData(JJTOBJDATA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	String obj;
}
{/*@bgen(jjtree) ObjData */
        try {
/*@egen*/
	<BLOCK_START>
	(Func())*
	obj = Obj()
	<BLOCK_END>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.nodeValue = obj;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String Obj()      :
{
	Token t;
}
{
	<OBJ> t = ObjName() { return t.image; }
	|	Eye() { return null; }
	|	<TARGET> { return null; }
}

Token ObjName()      :
{
    Token t;
}
{
    (
        t = <OBJ>
    |   <DQ>( t = <NUMNAME> )<DQ>
    |   t = <NAME>
    )
    {
        return t;
    }
}

void Eye()      :
{}
{
	<EYE> Func()
}

void Func():
{/*@bgen(jjtree) Func */
  ASTFunc jjtn000 = new ASTFunc(JJTFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Func */
        try {
/*@egen*/
	FuncName() <DATA_START> (Num()|Func())+ <DATA_END>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void FuncName():
{/*@bgen(jjtree) FuncName */
        ASTFuncName jjtn000 = new ASTFuncName(JJTFUNCNAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) FuncName */
        try {
/*@egen*/
	t = <NAME>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.nodeValue = t.image;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void Num():
{/*@bgen(jjtree) Num */
        ASTNum jjtn000 = new ASTNum(JJTNUM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Num */
        try {
/*@egen*/
	t = <NUM>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.nodeValue = t.image;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
