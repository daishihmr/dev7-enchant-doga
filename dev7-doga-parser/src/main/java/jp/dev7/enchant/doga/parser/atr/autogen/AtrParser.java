/* Generated By:JJTree&JavaCC: Do not edit this line. AtrParser.java */
package jp.dev7.enchant.doga.parser.atr.autogen;
public class AtrParser/*@bgen(jjtree)*/implements AtrParserTreeConstants, AtrParserConstants {/*@bgen(jjtree)*/
  protected JJTAtrParserState jjtree = new JJTAtrParserState();

  final public ASTStart Start() throws ParseException {
 /*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATR:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        Atr();
      }
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Atr() throws ParseException {
 /*@bgen(jjtree) Atr */
  ASTAtr jjtn000 = new ASTAtr(JJTATR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ATR);
      AtrName();
      jj_consume_token(BLOCK_START);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPT:
        case FUNCNAME:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        Func();
      }
      jj_consume_token(BLOCK_END);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void AtrName() throws ParseException {
 /*@bgen(jjtree) AtrName */
    ASTAtrName jjtn000 = new ASTAtrName(JJTATRNAME);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DQ:
        jj_consume_token(DQ);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATR:
      case OPT:
      case FUNCNAME:
      case CELLLOOKEDGE:
      case CELLLOOKSPECULAR:
      case EDGECANCEL:
      case EMITTION:
      case DRAW:
      case SHADER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATR:
          t = jj_consume_token(ATR);
          break;
        case OPT:
          t = jj_consume_token(OPT);
          break;
        case FUNCNAME:
          t = jj_consume_token(FUNCNAME);
          break;
        case CELLLOOKEDGE:
          t = jj_consume_token(CELLLOOKEDGE);
          break;
        case CELLLOOKSPECULAR:
          t = jj_consume_token(CELLLOOKSPECULAR);
          break;
        case EDGECANCEL:
          t = jj_consume_token(EDGECANCEL);
          break;
        case EMITTION:
          t = jj_consume_token(EMITTION);
          break;
        case DRAW:
          t = jj_consume_token(DRAW);
          break;
        case SHADER:
          t = jj_consume_token(SHADER);
          jjtn000.nodeValue = t.image;
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case NAME:
        jjtn000.nodeValue = SpcContainerd();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DQ:
        jj_consume_token(DQ);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public String SpcContainerd() throws ParseException {
    String s = "";
    Token t;
    label_3:
    while (true) {
      t = jj_consume_token(NAME);
                   s += t.image + " ";
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
    }
        {if (true) return s.trim();}
    throw new Error("Missing return statement in function");
  }

  final public void Func() throws ParseException {
 /*@bgen(jjtree) Func */
  ASTFunc jjtn000 = new ASTFunc(JJTFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCNAME:
        jjtn000.nodeValue = FuncName();
        jj_consume_token(DATA_START);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUM:
            Num();
            break;
          case NAME:
          case DQ:
            FilePath();
            break;
          case OPT:
          case FUNCNAME:
            Func();
            break;
          default:
            jj_la1[7] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OPT:
          case FUNCNAME:
          case NUM:
          case NAME:
          case DQ:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_4;
          }
        }
        jj_consume_token(DATA_END);
        break;
      case OPT:
        jjtn000.nodeValue = Opt();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public String FuncName() throws ParseException {
    Token t;
    t = jj_consume_token(FUNCNAME);
        {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String Num() throws ParseException {
 /*@bgen(jjtree) Num */
    ASTNum jjtn000 = new ASTNum(JJTNUM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUM);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.nodeValue = t.image;
        {if (true) return t.image;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String FilePath() throws ParseException {
 /*@bgen(jjtree) FilePath */
    ASTFilePath jjtn000 = new ASTFilePath(JJTFILEPATH);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DQ:
        jj_consume_token(DQ);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      t = jj_consume_token(NAME);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DQ:
        jj_consume_token(DQ);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.nodeValue = t.image;
        {if (true) return t.image;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Opt() throws ParseException {
    jj_consume_token(OPT);
    jj_consume_token(DATA_START);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASTSHADOW:
        jj_consume_token(CASTSHADOW);
        break;
      case RECEIVESHADOW:
        jj_consume_token(RECEIVESHADOW);
        break;
      case CELLLOOKEDGE:
        jj_consume_token(CELLLOOKEDGE);
        break;
      case CELLLOOKSPECULAR:
        Celllookspecular();
        break;
      case EDGECANCEL:
        Edgecancel();
        break;
      case DRAW:
        Draw();
        break;
      case RATE:
        Rate();
        break;
      case EMPHASIS:
        Emphasis();
        break;
      case SHADER:
        Shader();
        break;
      case EMITTION:
        Emittion();
        break;
      case NAME:
        jj_consume_token(NAME);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASTSHADOW:
      case RECEIVESHADOW:
      case CELLLOOKEDGE:
      case CELLLOOKSPECULAR:
      case EDGECANCEL:
      case EMITTION:
      case EMPHASIS:
      case DRAW:
      case RATE:
      case SHADER:
      case NAME:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
    }
    jj_consume_token(DATA_END);
       {if (true) return "opt";}
    throw new Error("Missing return statement in function");
  }

  final public void Celllookspecular() throws ParseException {
    jj_consume_token(CELLLOOKSPECULAR);
    Num();
    Num();
  }

  final public void Edgecancel() throws ParseException {
    jj_consume_token(EDGECANCEL);
  }

  final public void Draw() throws ParseException {
    jj_consume_token(DRAW);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      Num();
      break;
    case OPT:
    case FUNCNAME:
      Func();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Rate() throws ParseException {
    jj_consume_token(RATE);
    Num();
  }

  final public void Emphasis() throws ParseException {
    jj_consume_token(EMPHASIS);
    Num();
  }

  final public void Shader() throws ParseException {
    jj_consume_token(SHADER);
    Num();
    jj_consume_token(DATA_START);
    Num();
    Num();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      Num();
      break;
    case OPT:
    case FUNCNAME:
      Func();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(DATA_END);
    jj_consume_token(DATA_START);
    Num();
    Num();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      Num();
      break;
    case OPT:
    case FUNCNAME:
      Func();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(DATA_END);
    jj_consume_token(DATA_START);
    Num();
    Num();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      Num();
      break;
    case OPT:
    case FUNCNAME:
      Func();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(DATA_END);
  }

  final public void Emittion() throws ParseException {
 /*@bgen(jjtree) Emittion */
  ASTEmittion jjtn000 = new ASTEmittion(JJTEMITTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(EMITTION);
      Num();
      Num();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  /** Generated Token Manager. */
  public AtrParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0xc00,0x10000000,0x2bcd00,0xabcd00,0x10000000,0x800000,0x10c00c00,0x10c00c00,0xc00,0x10000000,0x10000000,0xbff000,0xbff000,0x400c00,0x400c00,0x400c00,0x400c00,};
   }

  /** Constructor with InputStream. */
  public AtrParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AtrParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AtrParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AtrParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AtrParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AtrParser(AtrParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AtrParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[29];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 29; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
