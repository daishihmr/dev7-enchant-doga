/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. suf.jj */
/*@egen*/options {
	STATIC = false;
	             
	               
                                                          
}

PARSER_BEGIN(SufParser)
package jp.dev7.enchant.doga.parser.suf.autogen;
@SuppressWarnings("unused") public class SufParser/*@bgen(jjtree)*/implements SufParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTSufParserState jjtree = new JJTSufParserState();

/*@egen*/
}
PARSER_END(SufParser)

SKIP:
{
	" " | "\r" | "\t" | "\n"
}

MORE: { "/*": COMMENT_TEXT }
<COMMENT_TEXT> SPECIAL_TOKEN: { <COMMENT: "*/">: DEFAULT }
<COMMENT_TEXT> MORE: { < ~[] > }

TOKEN:
{
		<OBJ: "obj">
	|	<SUF: "suf">
	|	<ATR: "atr">
	|	<PRIM: "prim">
	|	<POLY: "poly">
	|   <SHADE: "shade">
	|   <UVPOLY: "uvpoly">
	|   <UVSHADE: "uvshade">
	|	<NUM: ("-")?(["0"-"9"])+("."(["0"-"9"])+)?(("E-")(["0"-"9"])+)?>
    |   <NAME: ["0"-"9", "a"-"z", "A"-"Z", "_", "#", ".", ":", "\\", "[", "]", "-", "\u3040"-"\u309f", "\u30a0"-"\u30ff", "\u4e00"-"\u9fff", "\uff10"-"\uff19", "\uff21"-"\uff3a", "\uff41"-"\uff5a", "\uff1f", "\uff01", "\uff08", "\uff09"]
              (["0"-"9", "a"-"z", "A"-"Z", "_", "#", ".", ":", "\\", "[", "]", "-", "\u3040"-"\u309f", "\u30a0"-"\u30ff", "\u4e00"-"\u9fff", "\uff10"-"\uff19", "\uff21"-"\uff3a", "\uff41"-"\uff5a", "\uff1f", "\uff01", "\uff08", "\uff09"])*>
	|	<BLOCK_START: "{">
	|	<BLOCK_END: "}">
	|	<DATA_START: "(">
	|	<DATA_END: ")">
	|	<DQ: "\"">
}

ASTStart Start():
{/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
        try {
/*@egen*/
	(Obj())+/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Obj():
{/*@bgen(jjtree) Obj */
  ASTObj jjtn000 = new ASTObj(JJTOBJ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Obj */
        try {
/*@egen*/
	<OBJ> <SUF> jjtn000.nodeValue = ObjectName() <BLOCK_START>
		ObjectBody()
	<BLOCK_END>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String ObjectName()      :
{
	String name;
}
{
	(
    	name = Name()
    |	<DQ> name = Name() <DQ>
    )
    {
    	return name;
    }
}

void ObjectBody()      :
{}
{
    (AttrObj())*
}

void AttrObj():
{/*@bgen(jjtree) AttrObj */
  ASTAttrObj jjtn000 = new ASTAttrObj(JJTATTROBJ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AttrObj */
        try {
/*@egen*/
	Attribute()
	(Func())?
	(Primitive())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Attribute():
{/*@bgen(jjtree) Attribute */
  ASTAttribute jjtn000 = new ASTAttribute(JJTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Attribute */
    try {
/*@egen*/
    <ATR> jjtn000.nodeValue = AttrName()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String AttrName()      :
{
	String name;
}
{
	(
    	name = Name()
    |	<DQ> name = Name() <DQ>
    )
    {
    	return name;
    }
}

void Func()      :
{}
{
	<NAME> <DATA_START> (Func() | Num())+ <DATA_END>
}

void Primitive():
{/*@bgen(jjtree) Primitive */
  ASTPrimitive jjtn000 = new ASTPrimitive(JJTPRIMITIVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Primitive */
    try {
/*@egen*/
    <PRIM> 
        ((<POLY> <DATA_START> (PolygonVertex())* <DATA_END>)
    |   (<SHADE> <DATA_START> (ShadeVertex())* <DATA_END>)
    |   (<UVPOLY> <DATA_START> (UvPolyVertex())* <DATA_END>)
    |   (<UVSHADE> <DATA_START> (UvShadeVertex())* <DATA_END>))/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PolygonVertex():
{/*@bgen(jjtree) PolygonVertex */
  ASTPolygonVertex jjtn000 = new ASTPolygonVertex(JJTPOLYGONVERTEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PolygonVertex */
    try {
/*@egen*/
    X() Y() Z()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ShadeVertex():
{/*@bgen(jjtree) ShadeVertex */
  ASTShadeVertex jjtn000 = new ASTShadeVertex(JJTSHADEVERTEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ShadeVertex */
    try {
/*@egen*/
    X() Y() Z() NormalX() NormalY() NormalZ()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void UvPolyVertex():
{/*@bgen(jjtree) UvPolyVertex */
  ASTUvPolyVertex jjtn000 = new ASTUvPolyVertex(JJTUVPOLYVERTEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UvPolyVertex */
    try {
/*@egen*/
    X() Y() Z() U() V()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void UvShadeVertex():
{/*@bgen(jjtree) UvShadeVertex */
  ASTUvShadeVertex jjtn000 = new ASTUvShadeVertex(JJTUVSHADEVERTEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UvShadeVertex */
    try {
/*@egen*/
    X() Y() Z() NormalX() NormalY() NormalZ() U() V()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String Name()      :
{ Token t; }
{
	(
		t = <NAME>
    |	t = <OBJ>
    |	t = <SUF>
    |	t = <ATR>
    |	t = <PRIM>
    |	t = <POLY>
    |	t = <SHADE>
    |	t = <UVPOLY>
    |	t = <UVSHADE>
    )
    {
    	return t.image;
    }
}

void X():{/*@bgen(jjtree) X */
  ASTX jjtn000 = new ASTX(JJTX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) X */
             try {
/*@egen*/ jjtn000.nodeValue = Num()/*@bgen(jjtree)*/
             } catch (Throwable jjte000) {
               if (jjtc000) {
                 jjtree.clearNodeScope(jjtn000);
                 jjtc000 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte000 instanceof RuntimeException) {
                 throw (RuntimeException)jjte000;
               }
               if (jjte000 instanceof ParseException) {
                 throw (ParseException)jjte000;
               }
               throw (Error)jjte000;
             } finally {
               if (jjtc000) {
                 jjtree.closeNodeScope(jjtn000, true);
               }
             }
/*@egen*/ }
void Y():{/*@bgen(jjtree) Y */
  ASTY jjtn000 = new ASTY(JJTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Y */
             try {
/*@egen*/ jjtn000.nodeValue = Num()/*@bgen(jjtree)*/
             } catch (Throwable jjte000) {
               if (jjtc000) {
                 jjtree.clearNodeScope(jjtn000);
                 jjtc000 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte000 instanceof RuntimeException) {
                 throw (RuntimeException)jjte000;
               }
               if (jjte000 instanceof ParseException) {
                 throw (ParseException)jjte000;
               }
               throw (Error)jjte000;
             } finally {
               if (jjtc000) {
                 jjtree.closeNodeScope(jjtn000, true);
               }
             }
/*@egen*/ }
void Z():{/*@bgen(jjtree) Z */
  ASTZ jjtn000 = new ASTZ(JJTZ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Z */
             try {
/*@egen*/ jjtn000.nodeValue = Num()/*@bgen(jjtree)*/
             } catch (Throwable jjte000) {
               if (jjtc000) {
                 jjtree.clearNodeScope(jjtn000);
                 jjtc000 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte000 instanceof RuntimeException) {
                 throw (RuntimeException)jjte000;
               }
               if (jjte000 instanceof ParseException) {
                 throw (ParseException)jjte000;
               }
               throw (Error)jjte000;
             } finally {
               if (jjtc000) {
                 jjtree.closeNodeScope(jjtn000, true);
               }
             }
/*@egen*/ }
void NormalX():{/*@bgen(jjtree) NormalX */
  ASTNormalX jjtn000 = new ASTNormalX(JJTNORMALX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) NormalX */
                   try {
/*@egen*/ jjtn000.nodeValue = Num()/*@bgen(jjtree)*/
                   } catch (Throwable jjte000) {
                     if (jjtc000) {
                       jjtree.clearNodeScope(jjtn000);
                       jjtc000 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte000 instanceof RuntimeException) {
                       throw (RuntimeException)jjte000;
                     }
                     if (jjte000 instanceof ParseException) {
                       throw (ParseException)jjte000;
                     }
                     throw (Error)jjte000;
                   } finally {
                     if (jjtc000) {
                       jjtree.closeNodeScope(jjtn000, true);
                     }
                   }
/*@egen*/ }
void NormalY():{/*@bgen(jjtree) NormalY */
  ASTNormalY jjtn000 = new ASTNormalY(JJTNORMALY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) NormalY */
                   try {
/*@egen*/ jjtn000.nodeValue = Num()/*@bgen(jjtree)*/
                   } catch (Throwable jjte000) {
                     if (jjtc000) {
                       jjtree.clearNodeScope(jjtn000);
                       jjtc000 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte000 instanceof RuntimeException) {
                       throw (RuntimeException)jjte000;
                     }
                     if (jjte000 instanceof ParseException) {
                       throw (ParseException)jjte000;
                     }
                     throw (Error)jjte000;
                   } finally {
                     if (jjtc000) {
                       jjtree.closeNodeScope(jjtn000, true);
                     }
                   }
/*@egen*/ }
void NormalZ():{/*@bgen(jjtree) NormalZ */
  ASTNormalZ jjtn000 = new ASTNormalZ(JJTNORMALZ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) NormalZ */
                   try {
/*@egen*/ jjtn000.nodeValue = Num()/*@bgen(jjtree)*/
                   } catch (Throwable jjte000) {
                     if (jjtc000) {
                       jjtree.clearNodeScope(jjtn000);
                       jjtc000 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte000 instanceof RuntimeException) {
                       throw (RuntimeException)jjte000;
                     }
                     if (jjte000 instanceof ParseException) {
                       throw (ParseException)jjte000;
                     }
                     throw (Error)jjte000;
                   } finally {
                     if (jjtc000) {
                       jjtree.closeNodeScope(jjtn000, true);
                     }
                   }
/*@egen*/ }
void U():{/*@bgen(jjtree) U */
  ASTU jjtn000 = new ASTU(JJTU);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) U */
             try {
/*@egen*/ jjtn000.nodeValue = Num()/*@bgen(jjtree)*/
             } catch (Throwable jjte000) {
               if (jjtc000) {
                 jjtree.clearNodeScope(jjtn000);
                 jjtc000 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte000 instanceof RuntimeException) {
                 throw (RuntimeException)jjte000;
               }
               if (jjte000 instanceof ParseException) {
                 throw (ParseException)jjte000;
               }
               throw (Error)jjte000;
             } finally {
               if (jjtc000) {
                 jjtree.closeNodeScope(jjtn000, true);
               }
             }
/*@egen*/ }
void V():{/*@bgen(jjtree) V */
  ASTV jjtn000 = new ASTV(JJTV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) V */
             try {
/*@egen*/ jjtn000.nodeValue = Num()/*@bgen(jjtree)*/
             } catch (Throwable jjte000) {
               if (jjtc000) {
                 jjtree.clearNodeScope(jjtn000);
                 jjtc000 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte000 instanceof RuntimeException) {
                 throw (RuntimeException)jjte000;
               }
               if (jjte000 instanceof ParseException) {
                 throw (ParseException)jjte000;
               }
               throw (Error)jjte000;
             } finally {
               if (jjtc000) {
                 jjtree.closeNodeScope(jjtn000, true);
               }
             }
/*@egen*/ }

String Num()      :
{ Token t; }
{
	t = <NUM>
	{
		return t.image;
	}
}
