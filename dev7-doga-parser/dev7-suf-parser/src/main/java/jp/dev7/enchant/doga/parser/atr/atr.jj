/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. atr.jj */
/*@egen*/options {
	STATIC = false;
	             
	               
	                                                      
}

PARSER_BEGIN(AtrParser)
package jp.dev7.enchant.doga.parser.atr;
public class AtrParser/*@bgen(jjtree)*/implements AtrParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTAtrParserState jjtree = new JJTAtrParserState();

/*@egen*/
}
PARSER_END(AtrParser)

SKIP:
{
	" " | "\r" | "\t" | "\n"
}

MORE: { "/*": COMMENT_TEXT }
<COMMENT_TEXT> SPECIAL_TOKEN: { <COMMENT: "*/">: DEFAULT }
<COMMENT_TEXT> MORE: { < ~[] > }

TOKEN:
{
        <ATR: "atr">
    |   <COLON: ":">
    |   <OPT: "opt">
    |   <FUNCNAME: ("col" | "rgb" | "amb" | "dif" | "spc" | "tra" | "ref"
            | "colormap" | "bumpmap" | "tramap" | "spcmap" | "refmap" | "glowpowermap"
            | "mapwind" | "mapview" | "mapsize" )>

    |   <CASTSHADOW: "castshadow">
    |   <RECEIVESHADOW: "receiveshadow">
    |   <CELLLOOKEDGE: "celllookedge">
    |   <CELLLOOKSPECULAR: "celllookspecular">
    |   <EDGECANCEL: "edgecancel">
    |   <EMITTION: "emittion">
    |   <EMPHASIS: "emphasis">
    |   <DRAW: "draw">
    |   <RATE: "rate">
    |   <SHADER: "shader">

    |   <NUM: (("-")?(["0"-"9"])+)?("."(["0"-"9"])+)?(("E-")(["0"-"9"])+)?>
    |   <NAME: [         "a"-"z", "A"-"Z", "_", "#", ".", ":", "\\", "[", "]", "-", "\u3040"-"\u309f", "\u30a0"-"\u30ff", "\u4e00"-"\u9fff", "\uff10"-"\uff19", "\uff21"-"\uff3a", "\uff41"-"\uff5a", "\uff1f", "\uff01", "\uff08", "\uff09"]
              (["0"-"9", "a"-"z", "A"-"Z", "_", "#", ".", ":", "\\", "[", "]", "-", "\u3040"-"\u309f", "\u30a0"-"\u30ff", "\u4e00"-"\u9fff", "\uff10"-"\uff19", "\uff21"-"\uff3a", "\uff41"-"\uff5a", "\uff1f", "\uff01", "\uff08", "\uff09"])*>
    |   <BLOCK_START: "{">
    |   <BLOCK_END: "}">
    |   <DATA_START: "(">
    |   <DATA_END: ")">
    |   <DQ: "\"">
}

ASTStart Start():
{/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
    try {
/*@egen*/
    (Atr())*/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Atr():
{/*@bgen(jjtree) Atr */
  ASTAtr jjtn000 = new ASTAtr(JJTATR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Atr */
    try {
/*@egen*/
    <ATR> AtrName()
    <BLOCK_START>
        (Func())*
    <BLOCK_END>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AtrName():
{/*@bgen(jjtree) AtrName */
    ASTAtrName jjtn000 = new ASTAtrName(JJTATRNAME);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) AtrName */
    try {
/*@egen*/
    (<DQ>)?
    (
        (
             t = <ATR> | t = <OPT> | t = <FUNCNAME>  |t = <CELLLOOKEDGE>
            | t = <CELLLOOKSPECULAR> | t = <EDGECANCEL> | t = <EMITTION>
            | t = <DRAW> | t = <SHADER>
        { jjtn000.nodeValue = t.image; }
        )
        |
        (
            jjtn000.nodeValue = SpcContainerd()
        )
    )
    (<DQ>)?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String SpcContainerd()      :
{
    String s = "";
    Token t;
}
{
    ( t = <NAME> { s += t.image + " "; } )+
    {
        return s.trim();
    }
}

void Func():
{/*@bgen(jjtree) Func */
  ASTFunc jjtn000 = new ASTFunc(JJTFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Func */
    try {
/*@egen*/
    ( jjtn000.nodeValue = FuncName() <DATA_START> (Num() | FilePath() | Func())+ <DATA_END>)
    | jjtn000.nodeValue = Opt()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String FuncName()      :
{
    Token t;
}
{
    t = <FUNCNAME>
    {
        return t.image;
    }
}

String Num():
{/*@bgen(jjtree) Num */
    ASTNum jjtn000 = new ASTNum(JJTNUM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Num */
    try {
/*@egen*/
    t = <NUM>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.nodeValue = t.image;
        return t.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String FilePath():
{/*@bgen(jjtree) FilePath */
    ASTFilePath jjtn000 = new ASTFilePath(JJTFILEPATH);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) FilePath */
    try {
/*@egen*/
    (<DQ>)?
    (t = <NAME>)
    (<DQ>)?/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.nodeValue = t.image;
        return t.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String Opt()      :
{}
{
    <OPT> <DATA_START> (
            <CASTSHADOW>
        |   <RECEIVESHADOW>
        |   <CELLLOOKEDGE>
        |   Celllookspecular()
        |   Edgecancel()
        |   Draw()
        |   Rate()
        |   Emphasis()
        |   Shader()
        |   Emittion()
        |   <NAME>
    )+ <DATA_END>
    {
       return "opt";
    }
}

void Celllookspecular()      :
{}
{
    <CELLLOOKSPECULAR> Num() Num()
}

void Edgecancel()      :
{}
{
    <EDGECANCEL>
}

void Draw()      :
{}
{
    <DRAW> (Num() | Func())
}

void Rate()      :
{}
{
    <RATE> Num()
}

void Emphasis()      :
{}
{
    <EMPHASIS> Num()
}

void Shader()      :
{}
{
    <SHADER> Num()
    <DATA_START> Num() Num() (Num() | Func()) <DATA_END>
    <DATA_START> Num() Num() (Num() | Func()) <DATA_END>
    <DATA_START> Num() Num() (Num() | Func()) <DATA_END>
}

void Emittion():
{/*@bgen(jjtree) Emittion */
  ASTEmittion jjtn000 = new ASTEmittion(JJTEMITTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Emittion */
    try {
/*@egen*/
    <EMITTION> Num() Num()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
